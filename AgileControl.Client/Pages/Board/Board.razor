@page "/projects/{ProjectId:guid}/board"
@using AgileControl.Applicaion.Features.Column.Queiries.GetTitle
@using AgileControl.Applicaion.Features.TasksFeatures.Commands.Create
@using AgileControl.Applicaion.Features.TasksFeatures.Queries.Status
@using AgileControl.Applicaion.Models.Dtos
@using AgileControl.Domain.Enums
@using AgileControl.Shared.Features.Requests.Columns
@using AgileControl.Shared.Features.Requests.Tasks
@using Microsoft.AspNetCore.Components
@using System.ComponentModel.DataAnnotations
@using MudBlazor
@inject ITaskService TaskService
@inject NavigationManager Navigation
@inject ISnackbar Snackbar

<MudDropContainer T="TaskDto" @ref="_dropContainer" Items="@_tasks" ItemsSelector="@((item,column) => item.ColumnId.ToString() == column)" ItemDropped="TaskUpdated" Class="d-flex flex-row">
    <ChildContent>

        @foreach (var item in _sections)
        {
            <MudPaper Elevation="0" Width="224px" MinHeight="400px" Class="pa-4 ma-4 d-flex flex-column mud-background-gray rounded-lg">
                <MudToolBar Gutters="false">
                    <MudText Typo="Typo.subtitle1"><b>@item.Name</b></MudText>
                    <MudSpacer />
                    <MudMenu Icon="@Icons.Material.Rounded.MoreHoriz" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight" ListClass="pa-2 d-flex flex-column" PopoverClass="mud-elevation-25">
                        <MudButton Size="Size.Small" Color="Color.Error" StartIcon="@Icons.Material.Outlined.Delete" OnClick="@( () => DeleteSection(item))">Delete Section</MudButton>
                        <MudButton Size="Size.Small" Color="Color.Default" StartIcon="@Icons.Material.Rounded.Edit">Rename Section</MudButton>
                    </MudMenu>
                </MudToolBar>
                <MudDropZone T="TaskDto" Identifier="@item.ColumnId.ToString()" Class="mud-height-full" />
                @if (item.NewTaskOpen)
                {
                    <MudPaper Elevation="25" Class="pa-2 rounded-lg">
                        <EditForm Model="@newTaskModel" OnValidSubmit="@(() => AddTask(item))">
                            <DataAnnotationsValidator />
                            <MudTextField @bind-Value="newTaskModel.Title"
                            Label="Task Title"
                            Required="true"
                            RequiredError="Title is required"
                            Class="mb-2" />

                            <MudTextField @bind-Value="newTaskModel.Description"
                            Label="Description"
                            Lines="3"
                            Class="mb-2" />

                            <MudSelect @bind-Value="newTaskModel.Priority"
                            Label="Priority"
                            Class="mb-2">
                                <MudSelectItem Value="@Priority.No">No Priority</MudSelectItem>
                                <MudSelectItem Value="@Priority.Low">Low</MudSelectItem>
                                <MudSelectItem Value="@Priority.Average">Average</MudSelectItem>
                                <MudSelectItem Value="@Priority.High">High</MudSelectItem>
                            </MudSelect>

                            <MudDatePicker @bind-Value="newTaskModel.EndDate"
                            Label="Due Date"
                            Class="mb-2" />

                            <div class="d-flex" style="gap: 8px;">
                                <MudButton ButtonType="ButtonType.Submit"
                                Variant="Variant.Filled"
                                Color="Color.Primary">
                                    Add Task
                                </MudButton>
                                <MudButton OnClick="@(() => item.NewTaskOpen = false)"
                                Variant="Variant.Text"
                                Color="Color.Error">
                                    Cancel
                                </MudButton>
                            </div>
                        </EditForm>
                    </MudPaper>
                }
                else
                {
                    <MudButton OnClick="@(() => { item.NewTaskOpen = true; newTaskModel = new TaskDto(); })"
                    StartIcon="@Icons.Material.Filled.Add"
                    FullWidth="true"
                    Class="rounded-lg py-2">
                        Add Task
                    </MudButton>
                }

            </MudPaper>
        }
        <MudPaper Class="pa-4" Elevation="0" Width="224px">
            @if (_addSectionOpen)
            {
                <MudPaper Elevation="0" Width="224px" Class="pa-4 d-flex flex-column mud-background-gray rounded-lg">
                    <EditForm Model="@newSectionModel" OnValidSubmit="OnValidSectionSubmit">
                        <DataAnnotationsValidator />
                        <MudTextField @bind-Value="newSectionModel.Name" For="@(() => newSectionModel.Name)" Placeholder="New Section" Underline="false"></MudTextField>
                        <MudButton ButtonType="ButtonType.Submit" Size="Size.Small" Color="Color.Primary" FullWidth="true">Add Section</MudButton>
                    </EditForm>
                </MudPaper>
            }
            else
            {
                <MudButton OnClick="OpenAddNewSection" Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" Class="rounded-lg py-2" FullWidth="true">Add Section</MudButton>
            }
        </MudPaper>
    </ChildContent>
    <ItemRenderer>
        <MudPaper Elevation="5" Class="pa-4 rounded-lg my-3 d-flex flex-column" Style="gap: 8px;">
            <!-- Заголовок и приоритет -->
            <div class="d-flex align-center justify-space-between">
                <MudText Typo="Typo.subtitle1" Style="font-weight: 500;">@context.Title</MudText>

                <!-- Индикатор приоритета -->
                @switch (context.Priority)
                {
                    case Domain.Enums.Priority.High:
                        <MudChip T="string" Variant="Variant.Filled" Color="Color.Error" Class="ml-2" Icon="@Icons.Material.Filled.PriorityHigh">
                            High
                        </MudChip>
                        break;
                    case Domain.Enums.Priority.Average:
                        <MudChip T="string" Variant="Variant.Filled" Color="Color.Warning" Class="ml-2" Icon="@Icons.Material.Filled.LinearScale">
                            Average
                        </MudChip>
                        break;
                    case Domain.Enums.Priority.Low:
                        <MudChip T="string" Variant="Variant.Filled" Color="Color.Info" Class="ml-2" Icon="@Icons.Material.Filled.LowPriority">
                            Low
                        </MudChip>
                        break;
                    case Domain.Enums.Priority.No:
                        <MudChip T="string" Variant="Variant.Outlined" Color="Color.Default" Class="ml-2">
                            No priority
                        </MudChip>
                        break;
                }
            </div>

            <!-- Описание (если есть) -->
            @if (!string.IsNullOrEmpty(context.Description))
            {
                <MudText Typo="Typo.body2" Class="my-1">@context.Description</MudText>
            }

            <!-- Даты -->
            <div class="d-flex" style="gap: 12px;">
                <MudChip T="string" Variant="Variant.Outlined" Color="Color.Default" Size="Size.Small" Icon="@Icons.Material.Filled.CalendarToday">
                    @context.CreatedDate.ToString("dd.MM.yyyy")
                    <TooltipContent>
                        Created: @context.CreatedDate.ToString("g")
                    </TooltipContent>
                </MudChip>
                }
            </div>

            <!-- Ответственный и автор -->
            <div class="d-flex" style="gap: 8px; margin-top: 4px;">
                @if (context.Assignee != null)
                {
                    <MudAvatar Size="Size.Small" Color="Color.Primary" Style="width:24px; height:24px;">
                        <Initials>@GetInitials(context.Assignee.UserName)</Initials>
                        <TooltipContent>
                            Ответственный: @context.Assignee.UserName
                        </TooltipContent>
                    </MudAvatar>
                }
                @if (context.UserCreated != null)
                {
                    <MudAvatar Size="Size.Small" Color="Color.Secondary" Style="width:24px; height:24px;">
                        <Initials>@GetInitials(context.UserCreated.UserName)</Initials>
                        <TooltipContent>
                            Автор: @context.UserCreated.UserName
                        </TooltipContent>
                    </MudAvatar>
                }
            </div>
        </MudPaper>
    </ItemRenderer>

    @code {
    private string GetInitials(string userName)
    {
        if (string.IsNullOrEmpty(userName)) return "?";
        var parts = userName.Split(' ');
        if (parts.Length == 1) return parts[0][0].ToString();
        return $"{parts[0][0]}{parts[^1][0]}";
    }
}
</MudDropContainer>
@code {
    [Parameter] 
    public Guid ProjectId {get; set;}   
    private GetTitleResponse _columnInfo;

    private MudDropContainer<TaskDto> _dropContainer;

    private TaskDto newTaskModel = new TaskDto(
        title: string.Empty,
        columnId: Guid.Empty);

    private bool _addSectionOpen;

    private void TaskUpdated(MudItemDropInfo<TaskDto> info)
    {
        if (Guid.TryParse(info.DropzoneIdentifier, out var newColumnId))
        {
            info.Item.ColumnId = newColumnId;
        }
    }

    private List<KanBanSections>? _sections = new ();

    private List<TaskDto> _tasks = new();

    protected override async Task OnParametersSetAsync()
    {
        await LoadBoard();
    }

    public async Task LoadBoard()
    {
        StateHasChanged();

        try
        {
            _columnInfo = await TaskService.GetInfoColumnAsync(ProjectId);

            if (_columnInfo == null)
            {
                return;
            }

            _sections = _columnInfo.Columns
                .Select(column => new KanBanSections(
                name: column.ColumnName,
                newTaskOpen: false, 
                newTaskName: String.Empty,
                columnId: column.ColumnId
                ))
                .ToList();

            _tasks = await TaskService.GetTasksAsync(ProjectId);

            if (_tasks == null)
            {
                return;
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Ошибка загрузки: {ex.Message}", Severity.Error);
            Navigation.NavigateTo("/projects");
        }
    }

    public class KanBanSections
    {
        public string Name { get; init; }
        public bool NewTaskOpen { get; set; }
        public string NewTaskName { get; set; }
        public Guid? ColumnId { get; set; }

        public KanBanSections(string name, bool newTaskOpen, string newTaskName, Guid? columnId)
        {
            Name = name;
            NewTaskOpen = newTaskOpen;
            NewTaskName = newTaskName;
            ColumnId = columnId;
        }

        public KanBanSections(string name, bool newTaskOpen, string newTaskName)
        {
            Name = name;
            NewTaskOpen = newTaskOpen;
            NewTaskName = newTaskName;
        }
    }

    KanBanNewForm newSectionModel = new KanBanNewForm();

    public class KanBanNewForm
    {
        [Required]
        [StringLength(10, ErrorMessage = "Name length can't be more than 10.")]
        public string Name { get; set; }
    }

    private async Task OnValidSectionSubmit(EditContext context)
    {
        var newcolumn = await TaskService.AddColumnAsync(new CreateColumnRequest
            {
                Title = newSectionModel.Name,
                ProjectId = ProjectId
            });

        _sections.Add(new KanBanSections(newSectionModel.Name, false, String.Empty, newcolumn));
        newSectionModel.Name = string.Empty;
        _addSectionOpen = false;      
    }

    private void OpenAddNewSection()
    {
        _addSectionOpen = true;
    }

    private async Task AddTask(KanBanSections section)
    {
        newTaskModel.ColumnId = section.ColumnId;
        newTaskModel.CreatedDate = DateTime.Now;

        var createdTask = await TaskService.CreateTaskAsync(new CreateTaskRequest
            {
                Title = newTaskModel.Title,
                Description = newTaskModel.Description,
                Priority = newTaskModel.Priority,
                EndDate = newTaskModel.EndDate,
                ColumnId = newTaskModel.ColumnId,
                ProjectId = ProjectId
            });

        _tasks.Add(new TaskDto(
            title: newTaskModel.Title,
            columnId: newTaskModel.ColumnId)
            {
                Description = newTaskModel.Description,
                Priority = newTaskModel.Priority,
                EndDate = newTaskModel.EndDate,
                CreatedDate = newTaskModel.CreatedDate,
                Id = createdTask 
            });

        // Сбрасываем форму

        newTaskModel = new TaskDto(title: string.Empty,
         columnId: Guid.Empty);
        section.NewTaskName = string.Empty;
        section.NewTaskOpen = false;
        _dropContainer.Refresh();
    }

    private void DeleteSection(KanBanSections section)
    {
        if (_sections.Count == 1)
        {
            _tasks.Clear();
            _sections.Clear();
        }
        else
        {
            int newIndex = _sections.IndexOf(section) - 1;
            if (newIndex < 0)
            {
                newIndex = 0;
            }

            _sections.Remove(section);

            var tasks = _tasks.Where(x => x.ColumnId == section.ColumnId);
            foreach (var item in tasks)
            {
                item.ColumnId = _sections[newIndex].ColumnId;
            }
        }
    }
}