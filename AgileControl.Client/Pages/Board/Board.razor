@page "/projects/{ProjectId:guid}/board"
@using AgileControl.Applicaion.Features.Column.Queiries.GetTitle
@using AgileControl.Applicaion.Features.TasksFeatures.Commands.Create
@using AgileControl.Applicaion.Features.TasksFeatures.Queries.Status
@using AgileControl.Applicaion.Models.Dtos
@using AgileControl.Domain.Enums
@using AgileControl.Shared.Features.Requests.Columns
@using AgileControl.Shared.Features.Requests.Tasks
@using Microsoft.AspNetCore.Components
@using System.ComponentModel.DataAnnotations
@using MudBlazor
@inject ITaskService TaskService
@inject IUserService UserService
@inject NavigationManager Navigation
@inject ISnackbar Snackbar

<MudDropContainer T="TaskDto" @ref="_dropContainer" Items="@_tasks" ItemsSelector="@((item,column) => item.ColumnId.ToString() == column)" ItemDropped="TaskUpdated" Class="d-flex flex-row">
    <ChildContent>

        @foreach (var item in _sections)
        {
            <MudPaper Elevation="0" Width="400px" MinHeight="700px" Class="pa-4 ma-4 d-flex flex-column mud-background-gray rounded-lg">
                <MudToolBar Gutters="false">
                    <MudText Typo="Typo.subtitle1"><b>@item.Name</b></MudText>
                    <MudSpacer />
                    <MudMenu Icon="@Icons.Material.Rounded.MoreHoriz" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight" ListClass="pa-2 d-flex flex-column" PopoverClass="mud-elevation-25">
                        <MudButton Size="Size.Small" Color="Color.Error" StartIcon="@Icons.Material.Outlined.Delete" OnClick="@( () => DeleteSection(item))">Delete Section</MudButton>
                        <MudButton Size="Size.Small" Color="Color.Default" StartIcon="@Icons.Material.Rounded.Edit">Rename Section</MudButton>
                    </MudMenu>
                </MudToolBar>
                <MudDropZone T="TaskDto" Identifier="@item.ColumnId.ToString()" Class="mud-height-full" />
                @if (item.NewTaskOpen)
                {
                    <MudPaper Elevation="25" Class="pa-2 rounded-lg">
                        <EditForm Model="@newTaskModel" OnValidSubmit="@(() => AddTask(item, SelectedUserAssignee))">
                            <DataAnnotationsValidator />
                            <MudTextField @bind-Value="newTaskModel.Title"
                            Label="Название"
                            Required="true"
                            RequiredError="Название обязательно"
                            Class="mb-2" />

                            <MudTextField @bind-Value="newTaskModel.Description"
                            Label="Описание"
                            Lines="3"
                            Class="mb-2" />

                            <MudSelect @bind-Value="newTaskModel.Priority"
                            Label="Приоритет"
                            Class="mb-2">
                                <MudSelectItem Value="@Priority.No">No Priority</MudSelectItem>
                                <MudSelectItem Value="@Priority.Low">Low</MudSelectItem>
                                <MudSelectItem Value="@Priority.Average">Average</MudSelectItem>
                                <MudSelectItem Value="@Priority.High">High</MudSelectItem>
                            </MudSelect>

                            <MudDatePicker @bind-Value="newTaskModel.EndDate"
                            Label="Дата завершения"
                            Class="mb-2" />

                            <MudAutocomplete T="UserDto" 
                            Label="Добавить ответсвенного"
                            SearchFunc="SearchUsers"
                            ToStringFunc="@(u => u?.UserName ?? string.Empty)"
                            DebounceInterval="300"
                            MinCharacters="2"
                            Clearable="true"
                            ResetValueOnEmptyText="true"
                            ValueChanged="OnUserSelected">
                                <ItemTemplate Context="user">
                                    <div style="padding: 5px">
                                        <MudText>@user.UserName</MudText>
                                        <MudText Typo="Typo.caption" Color="Color.Secondary">@user.Email</MudText>     
                                    </div>
                                </ItemTemplate>
                            </MudAutocomplete>

                            <div class="d-flex" style="gap: 8px;">
                                <MudButton ButtonType="ButtonType.Submit"
                                Variant="Variant.Filled"
                                Color="Color.Primary">
                                    Добавить задачу
                                </MudButton>
                                <MudButton OnClick="@(() => item.NewTaskOpen = false)"
                                Variant="Variant.Text"
                                Color="Color.Error">
                                    Закрыть
                                </MudButton>
                            </div>


                        </EditForm>
                    </MudPaper>
                }
                else
                {
                    <MudButton OnClick="@(() => { item.NewTaskOpen = true; newTaskModel = new TaskDto(string.Empty, null); })"
                    StartIcon="@Icons.Material.Filled.Add"
                    FullWidth="true"
                    Class="rounded-lg py-2">
                        Добавить задачу
                    </MudButton>
                }

            </MudPaper>
        }
        <MudPaper Class="pa-4" Elevation="0" Width="224px">
            @if (_addSectionOpen)
            {
                <MudPaper Elevation="0" Width="224px" Class="pa-4 d-flex flex-column mud-background-gray rounded-lg">
                    <EditForm Model="@newSectionModel" OnValidSubmit="OnValidSectionSubmit">
                        <DataAnnotationsValidator />
                        <MudTextField @bind-Value="newSectionModel.Name" For="@(() => newSectionModel.Name)" Placeholder="New Section" Underline="false"></MudTextField>
                        <MudButton ButtonType="ButtonType.Submit" Size="Size.Small" Color="Color.Primary" FullWidth="true">Add Section</MudButton>
                    </EditForm>
                </MudPaper>
            }
            else
            {
                <MudButton OnClick="OpenAddNewSection" Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" Class="rounded-lg py-2" FullWidth="true">Add Section</MudButton>
            }
        </MudPaper>
    </ChildContent>

    <ItemRenderer>
    <MudPaper Elevation="5" Class="pa-4 rounded-lg my-3" Style="overflow: hidden;">
        <!-- Основная компактная информация -->
        <div class="d-flex align-center justify-space-between" style="gap: 8px;">
            <!-- Заголовок (с ограничением ширины) -->
            <MudText Typo="Typo.subtitle1" 
                    Style="font-weight: 500; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; max-width: 70%;">
                @context.Title
            </MudText>
            
            <!-- Приоритет -->
                @{
                    int fireCount = context.Priority switch
                    {
                        Domain.Enums.Priority.High => 3,
                        Domain.Enums.Priority.Average => 2,
                        Domain.Enums.Priority.Low => 1,
                        Domain.Enums.Priority.No => 0,
                        _ => 0
                    };

                    Color chipColor = context.Priority switch
                    {
                        Domain.Enums.Priority.High => Color.Error,
                        Domain.Enums.Priority.Average => Color.Warning,
                        Domain.Enums.Priority.Low => Color.Info,
                        _ => Color.Default
                    };

                    string tooltipText = context.Priority switch
                    {
                        Domain.Enums.Priority.High => "High priority",
                        Domain.Enums.Priority.Average => "Average priority",
                        Domain.Enums.Priority.Low => "Low priority",
                        Domain.Enums.Priority.No => "No priority",
                        _ => "Unknown"
                    };
                }

                <MudTooltip Text="@tooltipText">
                    <MudChip T="string" Variant="Variant.Filled" Color="@chipColor" Class="ml-2">
                        @if (fireCount > 0)
                        {
                            @for (int i = 0; i < fireCount; i++)
                            {
                                <MudIcon Icon="@Icons.Material.Filled.Whatshot" Class="mx-0.5" />
                            }
                        }
                        else
                        {
                            <MudText Class="ml-1" Typo="Typo.caption">No priority</MudText>
                        }
                    </MudChip>
                </MudTooltip>
        </div>

        <!-- Раскрывающиеся детали -->
        <MudExpansionPanels Style="margin-top: 8px;">
            <MudExpansionPanel>
                <ChildContent>
                    <div style="padding: 8px 0;">
                        <!-- Описание -->
                        @if (!string.IsNullOrEmpty(context.Description))
                        {
                            <MudText Typo="Typo.body2" Class="my-2" Style="word-break: break-word;">
                                @context.Description
                            </MudText>
                        }

                        <!-- Даты -->
                        <div class="d-flex" style="gap: 12px; margin-top: 8px;">
                            <MudTooltip Text="@($"Created: {context.CreatedDate.ToString("g")}")">
                                <ChildContent>
                                    <MudChip T="string" Variant="Variant.Outlined" Color="Color.Default" 
                                            Size="Size.Small" Icon="@Icons.Material.Filled.CalendarToday">
                                        @context.CreatedDate.ToString("dd.MM.yyyy")
                                    </MudChip>
                                </ChildContent>
                            </MudTooltip>
                        </div>

                        <!-- Ответственный -->
                        @if (context.Assignee != null)
                        {
                                <!-- Ответственный -->
                                <div class="d-flex" style="gap: 8px; margin-top: 4px;">
                                    @if (context.Assignee != null)
                                    {
                                        <MudChip T="string" Variant="Variant.Outlined" Color="Color.Default" Class="ml-2">
                                            Ответственный: @context.Assignee.UserName
                                        </MudChip>
                                    }
                                </div>
                        }
                    </div>
                </ChildContent>
            </MudExpansionPanel>
        </MudExpansionPanels>
    </MudPaper>
</ItemRenderer>
</MudDropContainer>
@code {
    [Parameter] 
    public Guid ProjectId {get; set;}   
    private GetTitleResponse _columnInfo;

    private MudDropContainer<TaskDto> _dropContainer;

    private TaskDto newTaskModel = new TaskDto(string.Empty, null);

    private UserDto? SelectedUserAssignee;

    private bool _addSectionOpen;

    private void TaskUpdated(MudItemDropInfo<TaskDto> info)
    {
        if (Guid.TryParse(info.DropzoneIdentifier, out var newColumnId))
        {
            info.Item.ColumnId = newColumnId;
        }
    }

    private List<KanBanSections>? _sections = new ();

    private List<TaskDto> _tasks = new();

    protected override async Task OnParametersSetAsync()
    {
        await LoadBoard();
    }

    public async Task LoadBoard()
    {
        StateHasChanged();

        try
        {
            _columnInfo = await TaskService.GetInfoColumnAsync(ProjectId);

            if (_columnInfo == null)
            {
                return;
            }

            _sections = _columnInfo.Columns
                .Select(column => new KanBanSections(
                name: column.ColumnName,
                newTaskOpen: false, 
                newTaskName: String.Empty,
                columnId: column.ColumnId
                ))
                .ToList();

            var tasksResponse = await TaskService.GetTasksAsync(ProjectId);

            if (tasksResponse == null || tasksResponse.Count == 0)
            {
                return;
            }

            _tasks = tasksResponse;
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Ошибка загрузки: {ex.Message}", Severity.Error);
            Navigation.NavigateTo("/projects");
        }
    }

    public class KanBanSections
    {
        public string Name { get; init; }
        public bool NewTaskOpen { get; set; }
        public string NewTaskName { get; set; }
        public Guid? ColumnId { get; set; }

        public KanBanSections(string name, bool newTaskOpen, string newTaskName, Guid? columnId)
        {
            Name = name;
            NewTaskOpen = newTaskOpen;
            NewTaskName = newTaskName;
            ColumnId = columnId;
        }

        public KanBanSections(string name, bool newTaskOpen, string newTaskName)
        {
            Name = name;
            NewTaskOpen = newTaskOpen;
            NewTaskName = newTaskName;
        }
    }

    KanBanNewForm newSectionModel = new KanBanNewForm();

    public class KanBanNewForm
    {
        [Required]
        [StringLength(10, ErrorMessage = "Name length can't be more than 10.")]
        public string Name { get; set; }
    }

    private async Task OnValidSectionSubmit(EditContext context)
    {
        var newcolumn = await TaskService.AddColumnAsync(new CreateColumnRequest
            {
                Title = newSectionModel.Name,
                ProjectId = ProjectId
            });

        _sections.Add(new KanBanSections(newSectionModel.Name, false, String.Empty, newcolumn));
        newSectionModel.Name = string.Empty;
        _addSectionOpen = false;      
    }

    private void OpenAddNewSection()
    {
        _addSectionOpen = true;
    }

    private async Task AddTask(KanBanSections section, UserDto assignee)
    {
        newTaskModel.ColumnId = section.ColumnId;
        newTaskModel.CreatedDate = DateTime.Now;

        var createdTask = await TaskService.CreateTaskAsync(new CreateTaskRequest
            {
                Title = newTaskModel.Title,
                Description = newTaskModel.Description,
                Priority = newTaskModel.Priority,
                EndDate = newTaskModel.EndDate,
                ColumnId = newTaskModel.ColumnId,
                ProjectId = ProjectId,
                AssigneeId = assignee.Id
            });

        _tasks.Add(new TaskDto(
            title: newTaskModel.Title,
            columnId: newTaskModel.ColumnId)
            {
                Description = newTaskModel.Description,
                Priority = newTaskModel.Priority,
                EndDate = newTaskModel.EndDate,
                CreatedDate = newTaskModel.CreatedDate,
                Id = createdTask,
                Assignee = assignee          
            });

        newTaskModel = new TaskDto(string.Empty, null);
        section.NewTaskName = string.Empty;
        section.NewTaskOpen = false;
        _dropContainer.Refresh();
    }

    private async Task<IEnumerable<UserDto>> SearchUsers(string searchText, CancellationToken token)
    {
        try
        {
            var response = await UserService.SearchByNameUserByProject(searchText, 10, ProjectId);
            return response.Users;
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Ошибка поиска: {ex.Message}", Severity.Error);
            return Enumerable.Empty<UserDto>();
        }
    }

    private async Task OnUserSelected(UserDto user)
    {
        SelectedUserAssignee = user;

        if (user == null)
            return;

        StateHasChanged();
    }

    private void DeleteSection(KanBanSections section)
    {
        if (_sections.Count == 1)
        {
            _tasks.Clear();
            _sections.Clear();
        }
        else
        {
            int newIndex = _sections.IndexOf(section) - 1;
            if (newIndex < 0)
            {
                newIndex = 0;
            }

            _sections.Remove(section);

            var tasks = _tasks.Where(x => x.ColumnId == section.ColumnId);
            foreach (var item in tasks)
            {
                item.ColumnId = _sections[newIndex].ColumnId;
            }
        }
    }
}