@* @using AgileControl.Applicaion.Models.Dtos
@using AgileControl.Domain.Enums
@using AgileControl.Shared.Features.Requests.Tasks
@using MudBlazor

<MudCard Elevation="2" Class="kanban-card">
    <MudCardContent>
        <div class="d-flex justify-space-between align-center">
            <MudText Typo="Typo.body1">@Task.Title</MudText>
            <MudMenu>
                <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Size="Size.Small"/>
                <MudMenuContent>
                    <MudMenuItem OnClick="@(() => ShowEditDialog(Task))">Редактировать</MudMenuItem>
                    <MudMenuItem OnClick="@(() => DeleteTask(Task.Id))">Удалить</MudMenuItem>
                    <MudDivider />
                    <MudMenuItem OnClick="@(() => ChangeStatus(Status.InProgress))">В работу</MudMenuItem>
                    <MudMenuItem OnClick="@(() => ChangeStatus(Status.Done))">Готово</MudMenuItem>
                </MudMenuContent>
            </MudMenu>
        </div>
        @if (!string.IsNullOrEmpty(Task.Description))
        {
            <MudText Typo="Typo.body2" Class="mt-2">@Task.Description</MudText>
        }
    </MudCardContent>
</MudCard>

@code {
    [Parameter] public TaskDto Task { get; set; } = default!;
    [Parameter] public EventCallback<(Guid, Status)> OnStatusChanged { get; set; }

    private async Task ChangeStatus(Status newStatus)
    {
        if (OnStatusChanged.HasDelegate)
            await OnStatusChanged.InvokeAsync((Task.Id, newStatus));
    }

    private async Task DeleteTask(Guid taskId)
    {
        // Реализуйте удаление задачи через TaskService
    }

    private void ShowEditDialog(TaskDto task)
    {
        // Реализуйте диалог редактирования
    }
} *@