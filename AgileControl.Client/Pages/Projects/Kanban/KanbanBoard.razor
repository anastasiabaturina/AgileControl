@* @* @* @using AgileControl.Applicaion.Models.Dtos
@using AgileControl.Domain.Enums
@using MudBlazor

<MudGrid>
    @foreach (var status in Enum.GetValues<Status>())
    {
        <MudItem xs="12" sm="6" md="4">
            <KanbanColumn Status="status"
                          Tasks="@GetTasksByStatus(status)"
                          OnStatusChanged="UpdateTaskStatusAsync"
                          OnTaskCreated="AddTaskAsync"
                          Class="kanban-column"
                          Style="min-height: 500px;" />
        </MudItem>
    }
</MudGrid>

@* @code { *@
    
@* @page "/projects/{ProjectId:guid}/tasks"

@using AgileControl.Applicaion.Models.Dtos
@using AgileControl.Client.Feature.Tasks
@using AgileControl.Domain.Enums
@using AgileControl.Shared.Features.Requests.Tasks
@inject ITaskService TaskService

<MudPaper Elevation="3" Class="pa-4">
    <MudText Typo="Typo.h4" Class="mb-4">Доска задач</MudText>

    @if (_isLoading)
    {
        <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-4" />
    }
    else
    {
        <div class="kanban-container">
            @foreach (var status in _statuses)
            {
                <KanbanColumn Status="@status"
                              Tasks="@_tasksByStatus[status]"
                              OnTaskCreated="@(async title => await AddNewTask(title, status))"
                              OnStatusChanged="@(async args => await UpdateTaskStatus(args.taskId, args.newStatus))"
                              Class="kanban-column"
                              Style="min-width: 300px;" />
            }
        </div>
    }
</MudPaper>

private List<TaskDto> Tasks = new()
    {
        new TaskDto { Id = Guid.NewGuid(), Title = "Создать проект", Description = "Начальная задача", Status = Status.Backlog },
        new TaskDto { Id = Guid.NewGuid(), Title = "Дизайн UI", Status = Status.InProgress },
        new TaskDto { Id = Guid.NewGuid(), Title = "Тестирование", Status = Status.Done }
    };

    private List<TaskDto> GetTasksByStatus(Status status) => Tasks.Where(t => t.Status == status).ToList();

    private async Task AddTaskAsync(string title)
    {
        Tasks.Add(new TaskDto
            {
                Id = Guid.NewGuid(),
                Title = title,
                Status = Status.Backlog
            });
        await InvokeAsync(StateHasChanged);
    }

    private async Task UpdateTaskStatusAsync((Guid taskId, Status newStatus) update)
    {
        var task = Tasks.FirstOrDefault(t => t.Id == update.taskId);
        if (task != null)
        {
            task.Status = update.newStatus;
        }
        await InvokeAsync(StateHasChanged);
    }
}


@code {
    private Dictionary<Status, List<TaskDto>> _tasksByStatus = new();
    private Status[] _statuses = Enum.GetValues<Status>();
    private bool _isLoading = true;
    [Parameter] public Guid ProjectId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _tasksByStatus = _statuses.ToDictionary(
        status => status, 
        status => new List<TaskDto>());

        await LoadTasks();
        _isLoading = false;
    }

    private async Task LoadTasks()
    {
        if (TaskService == null) return;

        foreach (var status in _statuses)
        {
            try
            {
                var tasks = await TaskService.GetTasksByStatusAsync(ProjectId, status);
                _tasksByStatus[status] = tasks?.ToList() ?? new List<TaskDto>();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading tasks: {ex.Message}");
            }
        }
    }

    private async Task AddNewTask(string title, Status status)
    {
        var newTask = new CreateTaskRequest
            {
                Title = title,
                Description = "",
                ProjectId = ProjectId
            };

        var response = await TaskService.AddTaskAsync(newTask);
        await LoadTasks();
    }

    private async Task UpdateTaskStatus(Guid taskId, Status newStatus)
    {
        await TaskService.UpdateTaskStatusAsync(taskId, newStatus);
        await LoadTasks();
    }
} *@